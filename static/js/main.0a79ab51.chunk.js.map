{"version":3,"sources":["atom.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["Categories","categoryState","atom","key","default","TO_DO","persistAtom","recoilPersist","toDoState","effects_UNSTABLE","toDoSelector","selector","get","toDos","category","filter","toDo","Input","styled","input","Button","button","CreateToDo","setToDos","useSetRecoilState","useRecoilValue","useForm","register","handleSubmit","setValue","onSubmit","oldToDos","text","id","Date","now","required","placeholder","ToDoLi","li","ToDo","onClick","event","name","currentTarget","targetIndex","findIndex","newToDo","DLELTE","slice","DOING","DONE","ToDoBox","div","Title","h1","Select","select","ToDoList","useRecoilState","setCategory","value","onInput","map","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","App","ReactDOM","render","StrictMode","boardColor","cardColor","document","getElementById"],"mappings":"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","file":"static/js/main.0a79ab51.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\nimport { recoilPersist } from \"recoil-persist\";\n\nexport enum Categories {\n  \"TO_DO\" = \"TO_DO\",\n  \"DOING\" = \"DOING\",\n  \"DONE\" = \"DONE\",\n  \"DLELTE\" = \"DLELTE\",\n}\n\nexport interface IToDo {\n  text: string;\n  id: number;\n  category: Categories;\n}\n\nexport const categoryState = atom<Categories>({\n  key: \"category\",\n  default: Categories.TO_DO,\n});\n\nconst { persistAtom } = recoilPersist();\nexport const toDoState = atom<IToDo[]>({\n  key: \"toDo\",\n  default: [],\n  effects_UNSTABLE: [persistAtom],\n});\nexport const toDoSelector = selector({\n  key: \"toDoSelector\",\n  get: ({ get }) => {\n    const toDos = get(toDoState);\n    const category = get(categoryState);\n    return toDos.filter((toDo) => toDo.category === category);\n  },\n});\n","import { useForm } from \"react-hook-form\";\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { categoryState, toDoState } from \"../atom\";\nimport styled from \"styled-components\";\n\nconst Input = styled.input`\n  width: 85%;\n  height: 30px;\n  margin-bottom: 50px;\n  border: solid 1px rgba(0, 0, 0, 0.3);\n  border-radius: 5px;\n`;\n\nconst Button = styled.button`\n  width: 50px;\n  height: 30px;\n  border: none;\n  border-radius: 5px;\n  background-color: rgba(13, 2, 115, 1);\n  color: white;\n  margin-left: 5px;\n`;\n\ninterface IInput {\n  toDo: string;\n}\n\nfunction CreateToDo() {\n  const setToDos = useSetRecoilState(toDoState);\n  const category = useRecoilValue(categoryState);\n  const { register, handleSubmit, setValue } = useForm<IInput>();\n  const onValid = ({ toDo }: IInput) => {\n    setToDos((oldToDos) => [\n      { text: toDo, id: Date.now(), category },\n      ...oldToDos,\n    ]);\n    setValue(\"toDo\", \"\");\n  };\n  return (\n    <form onSubmit={handleSubmit(onValid)}>\n      <Input\n        {...register(\"toDo\", {\n          required: \"Please write a To Do\",\n        })}\n        placeholder=\"Write a to do\"\n      />\n      <Button>add</Button>\n    </form>\n  );\n}\n\nexport default CreateToDo;\n","import React from \"react\";\nimport { useRecoilState, useSetRecoilState } from \"recoil\";\nimport { Categories, IToDo, toDoState } from \"../atom\";\nimport styled from \"styled-components\";\n\nconst ToDoLi = styled.li`\n  list-style: none;\n  width: 100%;\n  padding: 10px 0px;\n  border-bottom: solid 1px rgba(0, 0, 0, 0.5);\n  position: relative;\n`;\n\nconst Button = styled.button`\n  width: 80px;\n  height: 30px;\n  position: absolute;\n  top: 50%;\n  margin-top: -15px;\n  right: 0px;\n  background-color: transparent;\n  border-radius: 5px;\n  border: solid 1px rgba(13, 2, 115, 1);\n  text-transform: uppercase;\n  &:nth-child(2) {\n    right: 80px;\n  }\n  &:nth-child(3) {\n    right: 160px;\n  }\n`;\n\nfunction ToDo({ text, category, id }: IToDo) {\n  const setToDos = useSetRecoilState(toDoState);\n  const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const {\n      currentTarget: { name },\n    } = event;\n    setToDos((oldToDos) => {\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\n      const newToDo = { text, id, category: name as any };\n      if (name === Categories.DLELTE) {\n        return [\n          ...oldToDos.slice(0, targetIndex),\n          ...oldToDos.slice(targetIndex + 1),\n        ];\n      }\n      return [\n        ...oldToDos.slice(0, targetIndex),\n        newToDo,\n        ...oldToDos.slice(targetIndex + 1),\n      ];\n    });\n  };\n\n  return (\n    <ToDoLi>\n      <span>{text}</span>\n      {category !== Categories.DOING && (\n        <Button name={Categories.DOING} onClick={onClick}>\n          Doing\n        </Button>\n      )}\n      {category !== Categories.TO_DO && (\n        <Button name={Categories.TO_DO} onClick={onClick}>\n          todo\n        </Button>\n      )}\n      {category !== Categories.DONE && (\n        <Button name={Categories.DONE} onClick={onClick}>\n          done\n        </Button>\n      )}\n      <Button name={Categories.DLELTE} onClick={onClick}>\n        delete\n      </Button>\n    </ToDoLi>\n  );\n}\n\nexport default ToDo;\n","import { useRecoilState, useRecoilValue } from \"recoil\";\nimport { Categories, categoryState, toDoSelector, toDoState } from \"../atom\";\nimport styled from \"styled-components\";\nimport CreateToDo from \"./CreateToDo\";\nimport ToDo from \"./ToDo\";\n\nconst ToDoBox = styled.div`\n  max-width: 500px;\n  padding: 10px;\n  margin: 0px auto;\n  position: relative;\n  top: 150px;\n  border-radius: 15px;\n  box-shadow: 2px 3px 2px rgba(0, 0, 0, 0.5);\n  background-color: white;\n`;\n\nconst Title = styled.h1`\n  font-size: 28px;\n  text-transform: uppercase;\n  color: #0c005dcc;\n  font-weight: 700;\n`;\n\nconst Select = styled.select`\n  padding: 5px 10px;\n  border: none;\n`;\n\nfunction ToDoList() {\n  const toDos = useRecoilValue(toDoSelector);\n  const [category, setCategory] = useRecoilState(categoryState);\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\n    setCategory(event.currentTarget.value as any);\n  };\n\n  return (\n    <ToDoBox>\n      <Title>to dos</Title>\n      <hr />\n      <Select value={category} onInput={onInput}>\n        <option value={Categories.TO_DO}>Todo</option>\n        <option value={Categories.DOING}>Doing</option>\n        <option value={Categories.DONE}>Done</option>\n      </Select>\n      <CreateToDo />\n      {toDos?.map((toDo) => (\n        <ToDo key={toDo.id} {...toDo} />\n      ))}\n    </ToDoBox>\n  );\n}\n\nexport default ToDoList;\n","import { createGlobalStyle } from \"styled-components\";\nimport ToDoList from \"./components/ToDoList\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.textColor};\n  line-height: 1.2;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <ToDoList />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { dark } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={dark}>\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\n\nexport const dark: DefaultTheme = {\n  bgColor: \"#3F8CF2\",\n  boardColor: \"#DADFE9\",\n  cardColor: \"white\",\n  textColor: \"black\",\n};\n"],"sourceRoot":""}